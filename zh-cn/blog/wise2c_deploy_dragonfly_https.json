{
  "filename": "wise2c_deploy_dragonfly_https.md",
  "__html": "<p><img src=\"https://camo.githubusercontent.com/3890ebff894a525c0747e1945f991b10b42284b4/68747470733a2f2f6d6d62697a2e717069632e636e2f6d6d62697a5f706e672f4a533266664d4958736962304d564d7a504556414b58763233545070304341463559696253696133313839364e7737654b4f546837777948574c47736e6c4e665a496f366669626961444d6d7176615333716d5657554d323959412f3634303f77785f666d743d706e672674703d7765627026777866726f6d3d352677785f6c617a793d312677785f636f3d31\" alt=\"611.jpg | center | 827x347\"></p>\n<h1>睿云智合基于 Dragonfly 支持docker proxy https</h1>\n<p align='right'>by <a href=\"https://github.com/songshuone\">吴鹏</a></p>\n<h2>1、部署https harbor</h2>\n<p><a href=\"https://github.com/goharbor/harbor/blob/master/docs/configure_https.md\">https://github.com/goharbor/harbor/blob/master/docs/configure_https.md</a></p>\n<h2>2、部署docker_proxy</h2>\n<h3>pull images</h3>\n<p><strong>pull_images.sh</strong></p>\n<pre><code class=\"language-bash\"><span class=\"hljs-meta\">#!/bin/sh</span>\ndocker_registry_proxy=<span class=\"hljs-string\">\"dockerhubwp/docker_proxy_nginx:latest\"</span>\nsupernode=<span class=\"hljs-string\">\"registry.cn-hangzhou.aliyuncs.com/alidragonfly/supernode:0.2.0\"</span>\ndfclient=<span class=\"hljs-string\">\"dockerhubwp/dfclient:latest\"</span>\n\nimages=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${docker_registry_proxy}</span> <span class=\"hljs-variable\">${supernode}</span> <span class=\"hljs-variable\">${dfclient}</span>\"</span>\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-function\"><span class=\"hljs-title\">pullImage</span></span>(){\n    <span class=\"hljs-keyword\">for</span> image <span class=\"hljs-keyword\">in</span> <span class=\"hljs-variable\">${images}</span>; <span class=\"hljs-keyword\">do</span>\n        <span class=\"hljs-built_in\">echo</span> -e <span class=\"hljs-string\">\"pull image ======&gt;<span class=\"hljs-variable\">${image}</span>\"</span>\n        docker pull <span class=\"hljs-variable\">${image}</span>\n    <span class=\"hljs-keyword\">done</span>\n}\n\npullImage\n</code></pre>\n<p><strong>docker_proxy.sh</strong></p>\n<pre><code class=\"language-bash\"><span class=\"hljs-meta\">#! /bin/sh\n</span>\n<span class=\"hljs-comment\"># Separate deployment docker_proxy</span>\n<span class=\"hljs-comment\"># dfdaemon and docker registry map</span>\n<span class=\"hljs-comment\"># example  x.x.x</span>\nregistry=<span class=\"hljs-string\">\"harbor域名\"</span>\ncontainername=docker_registry_proxy\n\n<span class=\"hljs-comment\"># 你需要配置的dns 服务器 (如：dnsmasq)</span>\nDNS_SERVER=<span class=\"hljs-string\">\"dns-server\"</span>\ndocker_registry_proxy=<span class=\"hljs-string\">\"dockerhubwp/docker_proxy_nginx:latest\"</span>\n\n<span class=\"hljs-comment\"># get localhost ip</span>\nipaddr=$(ip addr | awk <span class=\"hljs-string\">'/^[0-9]+: / {}; /inet.*global/ {print gensub(/(.*)\\/(.*)/, \"\\\\1\", \"g\", $2)}'</span>)\nlocalhostIp=$(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${ipaddr}</span> | cut -d <span class=\"hljs-string\">\" \"</span> -f 1)\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-function\"><span class=\"hljs-title\">changeDockerProxy</span></span>() {\n    mkdir -p /etc/systemd/system/docker.service.d\n    cat &lt;&lt;EOD &gt;/etc/systemd/system/docker.service.d/http-proxy.conf\n[Service]\nEnvironment=<span class=\"hljs-string\">\"HTTP_PROXY=http://127.0.0.1:3128/\"</span>\nEnvironment=<span class=\"hljs-string\">\"HTTPS_PROXY=http://127.0.0.1:3128/\"</span>\nEOD\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-function\"><span class=\"hljs-title\">dockerDockerProxyRun</span></span>() {\n    <span class=\"hljs-keyword\">if</span> [[ 0 != $(docker ps -a | grep <span class=\"hljs-variable\">${containername}</span> | wc -l) ]]; <span class=\"hljs-keyword\">then</span>\n        docker rm -f <span class=\"hljs-variable\">${containername}</span>\n    <span class=\"hljs-keyword\">fi</span>\n    docker run --restart=always --privileged=<span class=\"hljs-literal\">true</span> --name <span class=\"hljs-variable\">${containername}</span> -d -p 0.0.0.0:3128:3128 -v /etc/docker_proxy_nginx/docker_mirror_certs:/ca -v /var/<span class=\"hljs-built_in\">log</span>/docker_proxy_nginx:/var/<span class=\"hljs-built_in\">log</span>/nginx/ -e DRAGONFLY_REGISTRIES=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${registry}</span>,http://<span class=\"hljs-variable\">${localhostIp}</span>:65001\"</span> -e REGISTRIES=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${registry}</span>\"</span> -e DNS_SERVER=<span class=\"hljs-variable\">${DNS_SERVER}</span> <span class=\"hljs-variable\">${docker_registry_proxy}</span>\n}\n\nchangeDockerProxy\n\nsystemctl daemon-reload\nsystemctl restart docker\n\ndockerDockerProxyRun\n</code></pre>\n<h2>3、部署dragonfly</h2>\n<h3>部署Supernode</h3>\n<p><strong><a href=\"http://supernode.sh\">supernode.sh</a></strong></p>\n<pre><code class=\"language-bash\"><span class=\"hljs-meta\">#!/bin/sh\n</span>\n<span class=\"hljs-comment\"># Separate deployment supernode</span>\n\nsupernode=<span class=\"hljs-string\">\"registry.cn-hangzhou.aliyuncs.com/alidragonfly/supernode:0.2.0\"</span>\ncontainername=supernode\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-function\"><span class=\"hljs-title\">superNode</span></span>() {\n    <span class=\"hljs-keyword\">if</span> [[ 0 != $(docker ps -a | grep <span class=\"hljs-variable\">${containername}</span> | wc -l) ]]; <span class=\"hljs-keyword\">then</span>\n        docker rm -f <span class=\"hljs-variable\">${containername}</span>\n    <span class=\"hljs-keyword\">fi</span>\n    docker run --name <span class=\"hljs-variable\">${containername}</span> --restart=always -d -p 8001:8001 -p 8002:8002 <span class=\"hljs-variable\">${supernode}</span>\n}\nsuperNode\n</code></pre>\n<h3>部署dfclient</h3>\n<p><strong><a href=\"http://dfclient.sh\">dfclient.sh</a></strong></p>\n<pre><code class=\"language-bash\"><span class=\"hljs-meta\">#!/bin/sh\n</span>\n<span class=\"hljs-comment\"># Separate deployment docker_proxy</span>\n\ndfclient=<span class=\"hljs-string\">\"dockerhubwp/dfclient:latest\"</span>\n\n<span class=\"hljs-comment\">#harbor 地址</span>\ndfdaemon_registry=<span class=\"hljs-string\">\"https://x.x.x\"</span>\ncontainername=dfclient\n\n<span class=\"hljs-comment\"># supernode ips  example (10.0.0.160,10.0.0.162)</span>\nsupernodes=<span class=\"hljs-string\">\"supernodeip\"</span>\n\n\nipaddr=$(ip addr | awk <span class=\"hljs-string\">'/^[0-9]+: / {}; /inet.*global/ {print gensub(/(.*)\\/(.*)/, \"\\\\1\", \"g\", $2)}'</span>)\nlocalhostIp=$(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${ipaddr}</span> | cut -d <span class=\"hljs-string\">\" \"</span> -f 1)\n\ncat &lt;&lt;EOD &gt;/etc/dragonfly.conf\n[node]\naddress=<span class=\"hljs-variable\">${supernodes}</span>\nEOD\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-function\"><span class=\"hljs-title\">startDfClient</span></span>() {\n    <span class=\"hljs-keyword\">if</span> [[ 0 != $(docker ps -a | grep <span class=\"hljs-variable\">${containername}</span> | wc -l) ]]; <span class=\"hljs-keyword\">then</span>\n        docker rm -f <span class=\"hljs-variable\">${containername}</span>\n    <span class=\"hljs-keyword\">fi</span>\n    docker run --name <span class=\"hljs-variable\">${containername}</span> --restart=always -d  -p 65001:65001 -v /root/.small-dragonfly:/root/.small-dragonfly -v /etc/dragonfly.conf:/etc/dragonfly.conf  -e dfdaemon_registry=<span class=\"hljs-variable\">${dfdaemon_registry}</span> -e localhostIp=<span class=\"hljs-variable\">${localhostIp}</span> <span class=\"hljs-variable\">${dfclient}</span>\n}\n\nstartDfClient\n</code></pre>\n<h3>最后</h3>\n<p><strong><a href=\"http://trust.sh\">trust.sh</a></strong></p>\n<pre><code class=\"language-bash\"><span class=\"hljs-meta\">#!/bin/sh\n</span>\n<span class=\"hljs-comment\"># trust ca</span>\ncurl http://127.0.0.1:3128/ca.crt &gt;/etc/pki/ca-trust/<span class=\"hljs-built_in\">source</span>/anchors/docker_proxy_nginx.crt\n\nupdate-ca-trust\n</code></pre>\n<h3>测试: 拉取镜像</h3>\n<pre><code class=\"language-bash\">docker pull x.x.x/library/nginx:latest\n</code></pre>\n<hr>\n<p>原文链接：<a href=\"https://mp.weixin.qq.com/s/95mX8cDox5bmgQ2xGHLPqQ\">https://mp.weixin.qq.com/s/95mX8cDox5bmgQ2xGHLPqQ</a></p>\n<p>参考：</p>\n<ul>\n<li><a href=\"https://d7y.io/zh-cn/\">https://d7y.io/zh-cn/</a></li>\n<li><a href=\"https://github.com/goharbor/harbor/\">https://github.com/goharbor/harbor/</a></li>\n<li><a href=\"https://github.com/rpardini/docker-registry-proxy\">https://github.com/rpardini/docker-registry-proxy</a></li>\n<li><a href=\"https://github.com/chobits/ngx_http_proxy_connect_module\">https://github.com/chobits/ngx_http_proxy_connect_module</a></li>\n</ul>\n",
  "link": "/zh-cn/blog/wise2c_deploy_dragonfly_https.html",
  "meta": {
    "hidden": "false",
    "title": "睿云智合基于 Dragonfly 支持docker proxy https",
    "keywords": "dragonfly,wise2c",
    "description": "本文档介绍了dragonfly 使用docker proxy 实现 https",
    "author": "吴鹏",
    "date": "2019-02-28"
  }
}