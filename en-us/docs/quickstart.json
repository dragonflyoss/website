{
  "filename": "quickstart.md",
  "__html": "<h1>Dragonfly Quick Start</h1>\n<p>Dragonfly Quick Start document aims to help you to quick start Dragonfly journey. This experiement is quite easy and simplified. If you are using Dragonfly in your production environment to handle production image distribution, please refer to supernode and dfget's detailed production parameter configuration.</p>\n<h2>Prerequisites</h2>\n<p>Assuming that quick start experiement requires us to prepare three host machines, one to play a role of supernode, and the other two for dfclient. Then the topology of the three nodes cluster is like the following:</p>\n<p><img src=\"./img/quick-start-topo.png\" alt=\"quick start cluster topology\"></p>\n<p>Then, we must make sure the following requirements:</p>\n<ol>\n<li>three host nodes in a LAN</li>\n<li>every node has deployed docker daemon</li>\n</ol>\n<h2>Step 1: Deploy SuperNode (Dragonfly Server)</h2>\n<p>Above three nodes we prepared, we choose one for deploying supernode.</p>\n<ol>\n<li>Pull the docker image we provided.</li>\n</ol>\n<pre><code class=\"language-bash\">docker pull dragonflyoss/supernode:0.3.1\n</code></pre>\n<ol start=\"2\">\n<li>Start a SuperNode.</li>\n</ol>\n<pre><code class=\"language-bash\">docker run -d -p 8001:8001 -p 8002:8002 dragonflyoss/supernode:0.3.1 -Dsupernode.advertiseIp=127.0.0.1\n</code></pre>\n<blockquote>\n<p><strong>NOTE</strong>: <code>supernode.advertiseIp</code> should be the ip that clients can connect to, <code>127.0.0.1</code> here is an example for testing.</p>\n</blockquote>\n<h2>Step 2. Configure Docker Daemon</h2>\n<p>After deploying Supernode in one node successfully, we should deploy dfclient(Dragonfly Client) on each of the rest two nodes. However, before deploying dfclient, we must configure Docker Daemon on both two nodes to add parameter <code>registry-mirrors</code>.</p>\n<ol>\n<li>Modify the configuration file <code>/etc/docker/daemon.json</code>.</li>\n</ol>\n<pre><code class=\"language-sh\">vi /etc/docker/daemon.json\n</code></pre>\n<p><strong>Tip:</strong> For more information on <code>/etc/docker/daemon.json</code>, see <a href=\"https://docs.docker.com/registry/recipes/mirror/#configure-the-cache\">Docker documentation</a>.</p>\n<ol start=\"2\">\n<li>Add or update the configuration item <code>registry-mirrors</code> in the configuration file.</li>\n</ol>\n<pre><code class=\"language-sh\"><span class=\"hljs-string\">\"registry-mirrors\"</span>: [<span class=\"hljs-string\">\"http://127.0.0.1:65001\"</span>]\n</code></pre>\n<ol start=\"3\">\n<li>Restart Docker Daemon。</li>\n</ol>\n<pre><code class=\"language-bash\">systemctl restart docker\n</code></pre>\n<h2>Step 3：Deploy dfclient (Dragonfly Client)</h2>\n<p>After configuring both two nodes' docker daemon, we can start to deploy dfclient on them.</p>\n<ol>\n<li>Pull dfclient on each of two nodes:</li>\n</ol>\n<pre><code class=\"language-bash\">docker pull dragonflyoss/dfclient:0.3.1\n</code></pre>\n<ol start=\"2\">\n<li>execute the command on the first of the two nodes to start dfclient</li>\n</ol>\n<pre><code class=\"language-bash\">docker run -d --name dfclient01 -p 65001:65001 dragonflyoss/dfclient:0.3.1 --registry https://index.docker.io\n</code></pre>\n<ol start=\"3\">\n<li>execute the command on the second of the two nodes to start dfclient</li>\n</ol>\n<pre><code class=\"language-bash\">docker run -d --name dfclient02 -p 65002:65001 dragonflyoss/dfclient:0.3.1 --registry https://index.docker.io\n</code></pre>\n<h2>Step 4：Validate Dragonfly</h2>\n<p>After deploying one supernode and two dfclients, we can start to validate if Dragonfly works as expected. You can execute the following command on both two dfclient nodes at the same time to pull the same image.</p>\n<pre><code class=\"language-bash\">docker pull nginx:latest\n</code></pre>\n<p>You can choose one dfclient node to execute the following command to check if the nginx image is distributed via Dragonfly.</p>\n<pre><code class=\"language-bash\">docker <span class=\"hljs-built_in\">exec</span> dfclient01 grep <span class=\"hljs-string\">'downloading piece'</span> /root/.small-dragonfly/logs/dfclient.log\n</code></pre>\n<p>If the output of command above has content like</p>\n<pre><code>2019-03-29 15:49:53.913 INFO sign:96027-1553845785.119 : downloading piece:{&quot;taskID&quot;:&quot;00a0503ea12457638ebbef5d0bfae51f9e8e0a0a349312c211f26f53beb93cdc&quot;,&quot;superNode&quot;:&quot;127.0.0.1&quot;,&quot;dstCid&quot;:&quot;127.0.0.1-95953-1553845720.488&quot;,&quot;range&quot;:&quot;67108864-71303167&quot;,&quot;result&quot;:503,&quot;status&quot;:701,&quot;pieceSize&quot;:4194304,&quot;pieceNum&quot;:16}\n</code></pre>\n<p>then Dragonfly is proved to work successfully.</p>\n<p>If you need to check if the image is distributed not only from supernode, but also from other peer node(dfclient), you can execute the following command:</p>\n<pre><code class=\"language-bash\">docker <span class=\"hljs-built_in\">exec</span> dfclient01 grep <span class=\"hljs-string\">'downloading piece'</span> /root/.small-dragonfly/logs/dfclient.log | grep -v cdnnode\n</code></pre>\n<p>If no output displays, then it means image distribution has not happened among dfclient. Otherwise, it works.</p>\n<h2>Related Topics</h2>\n<ul>\n<li><a href=\"userguide/install_server.md\">Installing Server</a></li>\n<li><a href=\"userguide/install_client.md\">Installing Client</a></li>\n<li><a href=\"userguide/download_files.md\">Downloading Files</a></li>\n<li><a href=\"userguide/supernode_configuration.md\">SuperNode Configuration</a></li>\n<li><a href=\"cli_ref/dfget.md\">Dfget</a></li>\n<li><a href=\"cli_ref/dfdaemon.md\">Dfdameon</a></li>\n</ul>\n",
  "link": "/en-us/docs/quickstart.html",
  "meta": {}
}